{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert-is-plain-object';\nimport isFunction from '@stdlib/assert-is-function';\nimport isndarrayLike from '@stdlib/assert-is-ndarray-like';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport isNonNegativeInteger from '@stdlib/assert-is-nonnegative-integer';\nimport isOrder from '@stdlib/ndarray-base-assert-is-order';\nimport getShape from '@stdlib/ndarray-shape';\nimport getOrder from '@stdlib/ndarray-order';\nimport getStrides from '@stdlib/ndarray-strides';\nimport getData from '@stdlib/ndarray-base-data-buffer';\nimport getDType from '@stdlib/ndarray-base-dtype';\nimport shape2strides from '@stdlib/ndarray-base-shape2strides';\nimport strides2order from '@stdlib/ndarray-base-strides2order';\nimport flattenShape from '@stdlib/ndarray-base-flatten-shape';\nimport map from '@stdlib/ndarray-base-map';\nimport emptyLike from '@stdlib/ndarray-empty-like';\nimport ndarray from '@stdlib/ndarray-ctor';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// VARIABLES //\n\nvar ROW_MAJOR = 'row-major';\nvar COL_MAJOR = 'column-major';\n\n\n// MAIN //\n\n/**\n* Flattens an ndarray according to a callback function.\n*\n* @param {ndarray} x - input ndarray\n* @param {Options} [options] - function options\n* @param {NonNegativeInteger} [options.depth] - maximum number of dimensions to flatten\n* @param {string} [options.order='row-major'] - order in which input ndarray elements should be flattened\n* @param {*} [options.dtype] - output ndarray data type\n* @param {Function} fcn - callback function\n* @param {*} [thisArg] - callback execution context\n* @throws {TypeError} first argument must be an ndarray-like object\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} callback argument must be a function\n* @throws {TypeError} must provide valid options\n* @returns {ndarray} output ndarray\n*\n* @example\n* import array from '@stdlib/ndarray-array';\n* import ndarray2array from '@stdlib/ndarray-to-array';\n*\n* function scale( value ) {\n*     return value * 2.0;\n* }\n*\n* var x = array( [ [ [ 1.0, 2.0 ] ], [ [ 3.0, 4.0 ] ], [ [ 5.0, 6.0 ] ] ] );\n* // return <ndarray>\n*\n* var y = flattenBy( x, scale );\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ 2.0, 4.0, 6.0, 8.0, 10.0, 12.0 ]\n*/\nfunction flattenBy( x, options, fcn, thisArg ) {\n\tvar hasOpts;\n\tvar nargs;\n\tvar view;\n\tvar opts;\n\tvar ctx;\n\tvar xsh;\n\tvar cb;\n\tvar st;\n\tvar y;\n\tvar o;\n\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'null5t', x ) );\n\t}\n\tnargs = arguments.length;\n\txsh = getShape( x );\n\thasOpts = false;\n\n\t// Define default options:\n\topts = {\n\t\t'depth': xsh.length,    // by default, flatten to a one-dimensional ndarray\n\t\t'order': ROW_MAJOR,     // by default, flatten in lexicographic order (i.e., trailing dimensions first; e.g., if `x` is a matrix, flatten row-by-row)\n\t\t'dtype': getDType( x )\n\t};\n\n\t// Case: flattenBy( x, fcn )\n\tif ( nargs <= 2 ) {\n\t\tcb = options;\n\t}\n\t// Case: flattenBy( x, ???, ??? )\n\telse if ( nargs === 3 ) {\n\t\t// Case: flattenBy( x, fcn, thisArg )\n\t\tif ( isFunction( options ) ) {\n\t\t\tcb = options;\n\t\t\tctx = fcn;\n\t\t}\n\t\t// Case: flattenBy( x, options, fcn )\n\t\telse {\n\t\t\thasOpts = true;\n\t\t\tcb = fcn;\n\t\t}\n\t}\n\t// Case: flattenBy( x, options, fcn, thisArg )\n\telse {\n\t\thasOpts = true;\n\t\tcb = fcn;\n\t\tctx = thisArg;\n\t}\n\tif ( !isFunction( cb ) ) {\n\t\tthrow new TypeError( format( 'null2b', cb ) );\n\t}\n\tif ( hasOpts ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'null2V', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'depth' ) ) {\n\t\t\tif ( !isNonNegativeInteger( options.depth ) ) {\n\t\t\t\tthrow new TypeError( format( 'null2t', 'depth', options.depth ) );\n\t\t\t}\n\t\t\topts.depth = options.depth;\n\t\t}\n\t\tif ( hasOwnProp( options, 'order' ) ) {\n\t\t\tif ( options.order === 'any' ) {\n\t\t\t\t// When 'any', we want to flatten according to the physical layout of the data in memory...\n\t\t\t\to = strides2order( getStrides( x ) );\n\t\t\t\tif ( o === 1 ) {\n\t\t\t\t\t// Data is currently arranged in row-major order:\n\t\t\t\t\topts.order = ROW_MAJOR;\n\t\t\t\t} else if ( o === 2 ) {\n\t\t\t\t\t// Data is currently arranged in column-major order:\n\t\t\t\t\topts.order = COL_MAJOR;\n\t\t\t\t} else { // o === 0 || o === 3 (i.e., neither row- nor column-major || both row- and column-major\n\t\t\t\t\t// When the data is either both row- and column-major (e.g., a one-dimensional ndarray) or neither row- nor column-major (e.g., unordered strides), fallback to flattening according to the stated order of the input ndarray:\n\t\t\t\t\topts.order = getOrder( x );\n\t\t\t\t}\n\t\t\t} else if ( options.order === 'same' ) {\n\t\t\t\t// When 'same', we want to flatten according to the stated order of the input ndarray:\n\t\t\t\topts.order = getOrder( x );\n\t\t\t} else if ( isOrder( options.order ) ) {\n\t\t\t\t// When provided a specific order, flatten according to that order regardless of the order of the input ndarray:\n\t\t\t\topts.order = options.order;\n\t\t\t} else {\n\t\t\t\tthrow new TypeError( format( 'null5C', 'order', options.order ) );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\t\t// Delegate `dtype` validation to `emptyLike` during output array creation:\n\t\t\topts.dtype = options.dtype;\n\t\t}\n\t}\n\t// Create an output ndarray having contiguous memory:\n\ty = emptyLike( x, {\n\t\t'shape': flattenShape( xsh, opts.depth ),\n\t\t'order': opts.order,\n\t\t'dtype': opts.dtype\n\t});\n\n\t// Create a view on top of output ndarray having the same shape as the input ndarray:\n\tst = ( xsh.length > 0 ) ? shape2strides( xsh, opts.order ) : [ 0 ];\n\tview = ndarray( opts.dtype, getData( y ), xsh, st, 0, opts.order );\n\n\t// Transform and assign elements to the output ndarray:\n\tmap( [ x, view ], cb, ctx );\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default flattenBy;\n"],"names":["ROW_MAJOR","flattenBy","x","options","fcn","thisArg","hasOpts","nargs","view","opts","ctx","xsh","cb","st","y","o","isndarrayLike","TypeError","format","arguments","length","depth","getShape","order","dtype","getDType","isFunction","isPlainObject","hasOwnProp","isNonNegativeInteger","strides2order","getStrides","getOrder","isOrder","emptyLike","shape","flattenShape","shape2strides","ndarray","getData","map"],"mappings":";;2qDA4CA,IAAIA,EAAY,YAuChB,SAASC,EAAWC,EAAGC,EAASC,EAAKC,GACpC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,IAAMC,EAAed,GACpB,MAAM,IAAIe,UAAWC,EAAQ,SAAUhB,IAoCxC,GAlCAK,EAAQY,UAAUC,OAElBd,GAAU,EAGVG,EAAO,CACNY,OALDV,EAAMW,EAAUpB,IAKFkB,OACbG,MAASvB,EACTwB,MAASC,EAAUvB,IAIfK,GAAS,EACbK,EAAKT,EAGc,IAAVI,EAEJmB,EAAYvB,IAChBS,EAAKT,EACLO,EAAMN,IAINE,GAAU,EACVM,EAAKR,IAKNE,GAAU,EACVM,EAAKR,EACLM,EAAML,IAEDqB,EAAYd,GACjB,MAAM,IAAIK,UAAWC,EAAQ,SAAUN,IAExC,GAAKN,EAAU,CACd,IAAMqB,EAAexB,GACpB,MAAM,IAAIc,UAAWC,EAAQ,SAAUf,IAExC,GAAKyB,EAAYzB,EAAS,SAAY,CACrC,IAAM0B,EAAsB1B,EAAQkB,OACnC,MAAM,IAAIJ,UAAWC,EAAQ,SAAU,QAASf,EAAQkB,QAEzDZ,EAAKY,MAAQlB,EAAQkB,KACrB,CACD,GAAKO,EAAYzB,EAAS,SACzB,GAAuB,QAAlBA,EAAQoB,MAEZR,EAAIe,EAAeC,EAAY7B,IAG9BO,EAAKc,MAFK,IAANR,EAESf,EACI,IAANe,EA3GA,eAgHEiB,EAAU9B,QAElB,GAAuB,SAAlBC,EAAQoB,MAEnBd,EAAKc,MAAQS,EAAU9B,OACjB,KAAK+B,EAAS9B,EAAQoB,OAI5B,MAAM,IAAIN,UAAWC,EAAQ,SAAU,QAASf,EAAQoB,QAFxDd,EAAKc,MAAQpB,EAAQoB,KAGrB,CAEGK,EAAYzB,EAAS,WAEzBM,EAAKe,MAAQrB,EAAQqB,MAEtB,CAcD,OAZAV,EAAIoB,EAAWhC,EAAG,CACjBiC,MAASC,EAAczB,EAAKF,EAAKY,OACjCE,MAASd,EAAKc,MACdC,MAASf,EAAKe,QAIfX,EAAOF,EAAIS,OAAS,EAAMiB,EAAe1B,EAAKF,EAAKc,OAAU,CAAE,GAC/Df,EAAO8B,EAAS7B,EAAKe,MAAOe,EAASzB,GAAKH,EAAKE,EAAI,EAAGJ,EAAKc,OAG3DiB,EAAK,CAAEtC,EAAGM,GAAQI,EAAIF,GACfI,CACR"}
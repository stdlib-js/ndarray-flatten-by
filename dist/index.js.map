{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert-is-plain-object' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar isndarrayLike = require( '@stdlib/assert-is-ndarray-like' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' );\nvar isOrder = require( '@stdlib/ndarray-base-assert-is-order' );\nvar getShape = require( '@stdlib/ndarray-shape' );\nvar getOrder = require( '@stdlib/ndarray-order' );\nvar getStrides = require( '@stdlib/ndarray-strides' );\nvar getData = require( '@stdlib/ndarray-base-data-buffer' );\nvar getDType = require( '@stdlib/ndarray-base-dtype' );\nvar shape2strides = require( '@stdlib/ndarray-base-shape2strides' );\nvar strides2order = require( '@stdlib/ndarray-base-strides2order' );\nvar flattenShape = require( '@stdlib/ndarray-base-flatten-shape' );\nvar map = require( '@stdlib/ndarray-base-map' );\nvar ndarray = require( '@stdlib/ndarray-base-ctor' );\nvar emptyLike = require( '@stdlib/ndarray-empty-like' );\nvar format = require( '@stdlib/string-format' );\n\n\n// VARIABLES //\n\nvar ROW_MAJOR = 'row-major';\nvar COL_MAJOR = 'column-major';\n\n\n// MAIN //\n\n/**\n* Flattens an ndarray according to a callback function.\n*\n* @param {ndarray} x - input ndarray\n* @param {Options} [options] - function options\n* @param {NonNegativeInteger} [options.depth] - maximum number of dimensions to flatten\n* @param {string} [options.order='row-major'] - order in which input ndarray elements should be flattened\n* @param {*} [options.dtype] - output ndarray data type\n* @param {Function} fcn - callback function\n* @param {*} [thisArg] - callback execution context\n* @throws {TypeError} first argument must be an ndarray-like object\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} callback argument must be a function\n* @throws {TypeError} must provide valid options\n* @returns {ndarray} output ndarray\n*\n* @example\n* var array = require( '@stdlib/ndarray-array' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n*\n* function scale( value ) {\n*     return value * 2.0;\n* }\n*\n* var x = array( [ [ [ 1.0, 2.0 ] ], [ [ 3.0, 4.0 ] ], [ [ 5.0, 6.0 ] ] ] );\n* // returns <ndarray>\n*\n* var y = flattenBy( x, scale );\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ 2.0, 4.0, 6.0, 8.0, 10.0, 12.0 ]\n*/\nfunction flattenBy( x, options, fcn, thisArg ) {\n\tvar hasOpts;\n\tvar nargs;\n\tvar view;\n\tvar opts;\n\tvar ctx;\n\tvar xsh;\n\tvar cb;\n\tvar st;\n\tvar y;\n\tvar o;\n\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray-like object. Value: `%s`.', x ) );\n\t}\n\tnargs = arguments.length;\n\txsh = getShape( x );\n\thasOpts = false;\n\n\t// Define default options:\n\topts = {\n\t\t'depth': xsh.length,    // by default, flatten to a one-dimensional ndarray\n\t\t'order': ROW_MAJOR,     // by default, flatten in lexicographic order (i.e., trailing dimensions first; e.g., if `x` is a matrix, flatten row-by-row)\n\t\t'dtype': getDType( x )\n\t};\n\n\t// Case: flattenBy( x, fcn )\n\tif ( nargs <= 2 ) {\n\t\tcb = options;\n\t}\n\t// Case: flattenBy( x, ???, ??? )\n\telse if ( nargs === 3 ) {\n\t\t// Case: flattenBy( x, fcn, thisArg )\n\t\tif ( isFunction( options ) ) {\n\t\t\tcb = options;\n\t\t\tctx = fcn;\n\t\t}\n\t\t// Case: flattenBy( x, options, fcn )\n\t\telse {\n\t\t\thasOpts = true;\n\t\t\tcb = fcn;\n\t\t}\n\t}\n\t// Case: flattenBy( x, options, fcn, thisArg )\n\telse {\n\t\thasOpts = true;\n\t\tcb = fcn;\n\t\tctx = thisArg;\n\t}\n\tif ( !isFunction( cb ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', cb ) );\n\t}\n\tif ( hasOpts ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'depth' ) ) {\n\t\t\tif ( !isNonNegativeInteger( options.depth ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'depth', options.depth ) );\n\t\t\t}\n\t\t\topts.depth = options.depth;\n\t\t}\n\t\tif ( hasOwnProp( options, 'order' ) ) {\n\t\t\tif ( options.order === 'any' ) {\n\t\t\t\t// When 'any', we want to flatten according to the physical layout of the data in memory...\n\t\t\t\to = strides2order( getStrides( x ) );\n\t\t\t\tif ( o === 1 ) {\n\t\t\t\t\t// Data is currently arranged in row-major order:\n\t\t\t\t\topts.order = ROW_MAJOR;\n\t\t\t\t} else if ( o === 2 ) {\n\t\t\t\t\t// Data is currently arranged in column-major order:\n\t\t\t\t\topts.order = COL_MAJOR;\n\t\t\t\t} else { // o === 0 || o === 3 (i.e., neither row- nor column-major || both row- and column-major\n\t\t\t\t\t// When the data is either both row- and column-major (e.g., a one-dimensional ndarray) or neither row- nor column-major (e.g., unordered strides), fallback to flattening according to the stated order of the input ndarray:\n\t\t\t\t\topts.order = getOrder( x );\n\t\t\t\t}\n\t\t\t} else if ( options.order === 'same' ) {\n\t\t\t\t// When 'same', we want to flatten according to the stated order of the input ndarray:\n\t\t\t\topts.order = getOrder( x );\n\t\t\t} else if ( isOrder( options.order ) ) {\n\t\t\t\t// When provided a specific order, flatten according to that order regardless of the order of the input ndarray:\n\t\t\t\topts.order = options.order;\n\t\t\t} else {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a recognized order. Option: `%s`.', 'order', options.order ) );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\t\t// Delegate `dtype` validation to `emptyLike` during output array creation:\n\t\t\topts.dtype = options.dtype;\n\t\t}\n\t}\n\t// Create an output ndarray having contiguous memory:\n\ty = emptyLike( x, {\n\t\t'shape': flattenShape( xsh, opts.depth ),\n\t\t'order': opts.order,\n\t\t'dtype': opts.dtype\n\t});\n\n\t// Create a view on top of the output ndarray having the same shape as the input ndarray:\n\tst = ( xsh.length > 0 ) ? shape2strides( xsh, opts.order ) : [ 0 ];\n\tview = new ndarray( opts.dtype, getData( y ), xsh, st, 0, opts.order );\n\n\t// Transform and assign elements to the output ndarray:\n\tmap( [ x, view ], cb, ctx );\n\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = flattenBy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Flatten an ndarray according to a callback function.\n*\n* @module @stdlib/ndarray-flatten-by\n*\n* @example\n* var array = require( '@stdlib/ndarray-array' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n* var flattenBy = require( '@stdlib/ndarray-flatten-by' );\n*\n* function scale( value ) {\n*     return value * 2.0;\n* }\n*\n* var x = array( [ [ [ 1.0, 2.0 ] ], [ [ 3.0, 4.0 ] ], [ [ 5.0, 6.0 ] ] ] );\n* // returns <ndarray>\n*\n* var y = flattenBy( x, scale );\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ 2.0, 4.0, 6.0, 8.0, 10.0, 12.0 ]\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isPlainObject", "isFunction", "isndarrayLike", "hasOwnProp", "isNonNegativeInteger", "isOrder", "getShape", "getOrder", "getStrides", "getData", "getDType", "shape2strides", "strides2order", "flattenShape", "map", "ndarray", "emptyLike", "format", "ROW_MAJOR", "COL_MAJOR", "flattenBy", "x", "options", "fcn", "thisArg", "hasOpts", "nargs", "view", "opts", "ctx", "xsh", "cb", "st", "y", "main"]
}
